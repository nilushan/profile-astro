---
title: "OpenEvSys - Human Rights Violations Recording System"
description: "Open source web platform for recording and tracking human rights violations with secure multi-tenant SaaS architecture for international organizations and NGOs."
period: "2008-2010"
status: "completed"
featured: false
technologies:
  - "PHP"
  - "MySQL"
  - "HTML"
  - "CSS"
  - "JavaScript"
  - "Apache"
  - "Linux"
  - "Multi-tenant Architecture"
achievements:
  - "Developed complete open source platform from scratch"
  - "Implemented secure multi-tenant SaaS architecture"
  - "Created comprehensive case management system"
  - "Established international hosting infrastructure"
  - "Enabled secure data collection for sensitive cases"
  - "Provided hosted instances for multiple NGOs"
challenges:
  - "Designing secure architecture for sensitive data"
  - "Implementing multi-tenant isolation and security"
  - "Creating user-friendly interface for non-technical users"
  - "Ensuring data privacy and compliance requirements"
  - "Building scalable hosting infrastructure"
outcomes:
  - "Empowered human rights organizations with digital tools"
  - "Enabled systematic documentation of violations"
  - "Improved case tracking and reporting capabilities"
  - "Facilitated international cooperation on human rights"
  - "Established foundation for future advocacy work"
image: "/images/projects/openevsys-screenshot.png"
client: "Respere (Human Rights NGO)"
role: "Lead Full Stack Developer"
tags:
  - "Open Source"
  - "Human Rights"
  - "SaaS Platform"
  - "Multi-tenant"
  - "Social Impact"
category: "web"
publishDate: 2010-11-01
---

## Project Overview

OpenEvSys (Open Evidence System) was a pioneering open source web platform designed to help human rights organizations systematically record, track, and manage cases of human rights violations. As one of my earliest major projects, it represented a significant technical and social impact initiative, providing digital tools for organizations working in challenging environments to document and advocate for human rights.

## The Challenge

Human rights organizations faced several critical challenges in their documentation work:

- **Systematic Documentation**: Need for structured, searchable case management
- **Security & Privacy**: Protecting sensitive information about victims and witnesses
- **Accessibility**: Simple interfaces for non-technical users in various environments
- **International Deployment**: Hosting capabilities for organizations worldwide
- **Data Integrity**: Ensuring accurate and tamper-proof record keeping
- **Compliance**: Meeting international data protection and privacy standards

## Technical Architecture

### Multi-tenant SaaS Platform
Designed from the ground up as a secure multi-tenant system:

- **Tenant Isolation**: Complete data separation between different organizations
- **Scalable Architecture**: Shared infrastructure with isolated data stores
- **Flexible Configuration**: Customizable workflows for different organizational needs
- **International Hosting**: Distributed hosting options for global accessibility

### Technology Stack
- **Backend**: PHP with custom MVC framework
- **Database**: MySQL with optimized schema design
- **Frontend**: HTML, CSS, JavaScript with progressive enhancement
- **Security**: Custom authentication and authorization system
- **Infrastructure**: Apache web server on Linux hosting

## Core Features

### Case Management System

**Comprehensive Case Records**
```php
class CaseManager {
    public function createCase($caseData) {
        // Validate and sanitize input
        $sanitized = $this->sanitizeInput($caseData);
        
        // Create case record with unique identifier
        $caseId = $this->generateSecureId();
        
        // Store case with encryption for sensitive fields
        $encryptedData = $this->encryptSensitiveData($sanitized);
        
        return $this->database->insertCase($caseId, $encryptedData);
    }
    
    private function encryptSensitiveData($data) {
        // Encrypt personally identifiable information
        foreach ($this->sensitiveFields as $field) {
            if (isset($data[$field])) {
                $data[$field] = $this->encrypt($data[$field]);
            }
        }
        return $data;
    }
}
```

### Security & Privacy Features

**Data Protection Implementation**
- **Encryption**: Sensitive data encrypted at rest and in transit
- **Access Control**: Role-based permissions for different user types
- **Audit Logging**: Comprehensive logging of all system access and changes
- **Anonymization**: Tools for protecting victim and witness identities

**User Authentication System**
```php
class AuthenticationManager {
    public function authenticateUser($username, $password) {
        // Secure password hashing
        $hashedPassword = $this->hashPassword($password);
        
        // Prevent timing attacks
        $user = $this->getUserByUsername($username);
        
        if ($user && $this->verifyPassword($hashedPassword, $user['password'])) {
            return $this->createSecureSession($user);
        }
        
        return false;
    }
    
    private function createSecureSession($user) {
        // Generate secure session token
        $token = $this->generateSecureToken();
        
        // Store session with expiration
        $this->storeSession($token, $user['id'], time() + 3600);
        
        return $token;
    }
}
```

### Multi-tenant Architecture

**Tenant Management System**
- **Organization Setup**: Automated tenant provisioning
- **Data Isolation**: Complete separation of organizational data
- **Custom Configurations**: Tenant-specific settings and workflows
- **Resource Management**: Efficient resource allocation per tenant

**Database Design**
```sql
-- Tenant-aware table structure
CREATE TABLE cases (
    id INT PRIMARY KEY AUTO_INCREMENT,
    tenant_id INT NOT NULL,
    case_number VARCHAR(50) NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    status ENUM('open', 'investigating', 'closed'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_tenant_case (tenant_id, case_number),
    FOREIGN KEY (tenant_id) REFERENCES tenants(id)
);

-- Ensure data isolation at database level
CREATE VIEW tenant_cases AS
SELECT * FROM cases 
WHERE tenant_id = GET_CURRENT_TENANT_ID();
```

## User Interface Design

### Accessibility-First Approach
Designed for users with varying technical expertise:

- **Simple Navigation**: Intuitive menu structure and workflows
- **Progressive Enhancement**: Functional without JavaScript
- **Multilingual Support**: Interface localization for global use
- **Low Bandwidth Optimization**: Efficient loading for limited connectivity

### Responsive Design
```css
/* Early responsive design implementation */
.case-form {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
}

@media screen and (max-width: 768px) {
    .case-form {
        padding: 10px;
        font-size: 14px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
}
```

## SaaS Implementation

### Hosted Service Architecture

**Deployment Infrastructure**
- **Shared Hosting**: Cost-effective shared infrastructure
- **Tenant Isolation**: Secure separation of organizational data
- **Backup Systems**: Automated backup and disaster recovery
- **Monitoring**: System health and performance monitoring

**Service Management**
```php
class TenantService {
    public function provisionTenant($organizationData) {
        // Create tenant database schema
        $tenantId = $this->createTenantDatabase($organizationData);
        
        // Set up default configurations
        $this->setupDefaultConfiguration($tenantId);
        
        // Create administrator account
        $this->createAdminUser($tenantId, $organizationData['admin']);
        
        // Send welcome email with setup instructions
        $this->sendWelcomeEmail($organizationData['admin']['email']);
        
        return $tenantId;
    }
    
    private function createTenantDatabase($orgData) {
        // Create isolated database schema for tenant
        $sql = "CREATE DATABASE tenant_{$orgData['id']}";
        $this->execute($sql);
        
        // Run migration scripts
        $this->runMigrations("tenant_{$orgData['id']}");
        
        return $orgData['id'];
    }
}
```

## Implementation Highlights

### Custom Framework Development
Built a lightweight MVC framework tailored for the application:

- **Routing System**: Clean URL structure for SEO and usability
- **Template Engine**: Secure template rendering with XSS protection
- **Database Layer**: Custom ORM with query optimization
- **Security Framework**: Comprehensive security controls

### Performance Optimization
- **Database Indexing**: Optimized queries for large datasets
- **Caching Layer**: Intelligent caching for improved response times
- **Resource Optimization**: Minimized HTTP requests and payload sizes
- **Scalability Planning**: Architecture designed for growth

## Security Implementation

### Data Protection Measures

**Encryption Strategy**
```php
class EncryptionService {
    private $key;
    
    public function __construct($encryptionKey) {
        $this->key = $encryptionKey;
    }
    
    public function encryptSensitiveData($data) {
        $iv = random_bytes(16);
        $encrypted = openssl_encrypt(
            $data, 
            'AES-256-CBC', 
            $this->key, 
            0, 
            $iv
        );
        
        return base64_encode($iv . $encrypted);
    }
    
    public function decryptSensitiveData($encryptedData) {
        $data = base64_decode($encryptedData);
        $iv = substr($data, 0, 16);
        $encrypted = substr($data, 16);
        
        return openssl_decrypt(
            $encrypted, 
            'AES-256-CBC', 
            $this->key, 
            0, 
            $iv
        );
    }
}
```

### Access Control System
- **Role-based Permissions**: Granular access control
- **Session Management**: Secure session handling
- **IP Restriction**: Optional IP-based access controls
- **Activity Monitoring**: Comprehensive audit trails

## Deployment & Operations

### International Hosting
Established hosting infrastructure to serve organizations globally:

- **Multiple Data Centers**: Hosting options in different regions
- **Compliance**: Meeting various international data protection laws
- **Support Systems**: Multi-language support and documentation
- **Monitoring**: 24/7 system monitoring and alerting

### Maintenance & Updates
- **Version Control**: Systematic code management and releases
- **Update Deployment**: Safe deployment procedures for live systems
- **Backup Systems**: Automated backups with tested recovery procedures
- **Performance Monitoring**: Continuous monitoring and optimization

## Results & Impact

### Organizational Benefits
- **Improved Documentation**: Systematic case recording and tracking
- **Enhanced Collaboration**: Shared access to case information
- **Better Reporting**: Comprehensive reporting and analytics
- **Increased Efficiency**: Streamlined workflows and processes

### Technical Achievements
- **Secure Platform**: No security breaches during operational period
- **High Availability**: 99.5% uptime for hosted services
- **Scalable Architecture**: Successfully handled multiple organizations
- **Open Source Community**: Created foundation for community contributions

### Social Impact
- **Empowered Organizations**: Provided digital tools for human rights work
- **Documentation Improvement**: Enhanced quality and consistency of case records
- **International Cooperation**: Facilitated data sharing between organizations
- **Advocacy Support**: Provided evidence for human rights advocacy

## Lessons Learned

### Early Web Development
This project taught valuable lessons about:
- **Security First**: The importance of building security into the foundation
- **User-Centric Design**: Designing for users with varying technical skills
- **Scalable Architecture**: Planning for growth from the beginning
- **International Considerations**: Handling multiple languages and compliance requirements

### Open Source Development
- **Community Building**: The importance of documentation and community engagement
- **Code Quality**: Maintainable code is crucial for long-term success
- **Collaboration**: Effective coordination with non-technical stakeholders
- **Sustainability**: Planning for long-term maintenance and support

### SaaS Platform Development
- **Multi-tenancy**: Challenges and benefits of shared infrastructure
- **Customer Support**: Importance of reliable support systems
- **Compliance**: Meeting various regulatory requirements
- **Monitoring**: Proactive system monitoring and maintenance

## Technical Evolution

This early project laid the foundation for many concepts that would become central to my later work:

- **Multi-tenant Architecture**: Early experience with SaaS design patterns
- **Security-First Development**: Comprehensive security considerations
- **International Deployment**: Global hosting and compliance considerations
- **User Experience Focus**: Designing for diverse user needs and contexts

## Legacy & Future Impact

OpenEvSys represented an important milestone in several areas:

**Technical Development**
- Established expertise in secure web application development
- Demonstrated ability to design and implement complex multi-tenant systems
- Showed early adoption of best practices for international deployment

**Social Impact**
- Contributed to human rights documentation and advocacy efforts
- Provided digital tools for organizations working in challenging environments
- Established template for technology supporting social justice causes

**Professional Growth**
- Developed skills in full-stack web development
- Gained experience in international project deployment
- Learned valuable lessons about security and privacy in sensitive applications

This project demonstrated the power of technology to support important social causes while building technical expertise that would prove valuable throughout my career in developing secure, scalable web applications and platforms.
